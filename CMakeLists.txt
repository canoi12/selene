cmake_minimum_required(VERSION 3.15.0 FATAL_ERROR)
project(selene VERSION 0.2.1 LANGUAGES C)
include(CheckLibraryExists)
include(CheckIncludeFile)

set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Set build type")

if (DEFINED MSVC AND DEFINED CMAKE_GENERATOR_PLATFORM)
    message("GENERATOR: ${CMAKE_GENERATOR_PLATFORM}")
    if ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "")
        if ("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "AMD64")
            set(CMAKE_SYSTEM_PROCESSOR "x64")
        else ()
            set(CMAKE_SYSTEM_PROCESSOR "${CMAKE_HOST_SYSTEM_PROCESSOR}")
        endif ()
    elseif ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
        set(CMAKE_SYSTEM_PROCESSOR "x86")
    else ()
        set(CMAKE_SYSTEM_PROCESSOR "${CMAKE_GENERATOR_PLATFORM}")
    endif()
endif ()

message("Build Type: ${CMAKE_BUILD_TYPE}")
message("Host System Name: ${CMAKE_HOST_SYSTEM_NAME}")
message("Host System Architecture: ${CMAKE_HOST_SYSTEM_PROCESSOR}")
message("Building for ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} target")
message("WIN32: ${WIN32}")
message("MSVC: ${MSVC}")
message("MINGW: ${MINGW}")
message("CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")

message("Static: ${CMAKE_STATIC_LIBRARY_SUFFIX} Shared: ${CMAKE_SHARED_LIBRARY_SUFFIX}")

if (${ANDROID})
    message("Android ABI: ${ANDROID_ABI}")
    message("Android Platform: ${ANDROID_PLATFORM}")
endif ()

if (WIN32)
    ENABLE_LANGUAGE(RC)
endif ()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/${CMAKE_SYSTEM_NAME}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/${CMAKE_SYSTEM_NAME}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/${CMAKE_SYSTEM_NAME}/lib)

if (NOT DEFINED MSVC)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lm")
endif ()


if (DEFINED triple)
    message("has triple ${triple}")
else ()
    message("Has no triple")
    if (DEFINED MSVC)
        if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86")
            set(triple "x86-windows-msvc")
        else ()
            set(triple "x64-windows-msvc")
        endif ()
        message("MSVC Triple: ${triple}")
    elseif (DEFINED MINGW)
        if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
            set(triple "x86_64-w64-mingw32")
        elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i686")
            set(triple "i686-w64-mingw32")
        endif ()
    else ()
        set(T_SUFFIX "gnu")
        if (${ANDROID})
        set(T_SUFFIX "android")
        endif ()
        if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
            set(triple "x86_64-linux-${T_SUFFIX}")
        elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i686")
            if (${ANDROID})
            set(triple "i386-linux-${T_SUFFIX}")
            else()
            set(triple "i686-linux-${T_SUFFIX}")
            endif ()
        elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "aarch64")
            set(triple "aarch64-linux-${T_SUFFIX}")
        else ()
            set(triple "armv7-linux-${T_SUFFIX}")
        endif ()
    endif ()
endif ()
message("TRIPLE: ${triple}")

if (DEFINED EMSCRIPTEN)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -sWASM=1")
endif ()

if (NOT DEFINED LIB_PLATFORM)
    if (${ANDROID})
    set(LIB_PLATFORM "/${ANDROID_PLATFORM}")
    elseif (DEFINED MSVC)
    set(LIB_PLATFORM "/v143")
    else()
    set(LIB_PLATFORM "")
    endif ()
endif ()

if (DEFINED MINGW)
add_definitions(-DMINGW)
endif ()

set(LUA_VERSION "5.4" CACHE STRING "Set the lua version to use")
# if (DEFINED MSVC)
# set(LUA_LIB "lua${LUA_VERSION}${CMAKE_STATIC_LIBRARY_SUFFIX}")
# else ()
# endif ()
set(LUA_LIB "lua${LUA_VERSION}")

# message("Lua Lib Path: ${CMAKE_SOURCE_DIR}/lua/lua${LUA_VERSION}/${triple}${LIB_PLATFORM}/lib/")
message("LibPath: ${CMAKE_LIBRARY_PATH}")
set(CMAKE_LIBRARY_PATH "${CMAKE_SOURCE_DIR}/dist/${triple}${LIB_PLATFORM}/lib")
message("Lua Lib Path: ${CMAKE_LIBRARY_PATH}")

if (${LUA_VERSION} STREQUAL "jit")
message("Using Lua JIT")
add_definitions(-DUSE_JIT)
endif ()

file(GLOB SELENE_SOURCES src/Data.c src/selene.c src/modules/*.c src/third/glad/src/glad.c)

include_directories(include/ src/third/ src/third/glad/include)
link_directories("${CMAKE_LIBRARY_PATH}")

# if (DEFINED MSVC)
#     set(SDL2_DIR src/third/SDL2/MSVC/cmake)
# elseif (DEFINED MINGW)
#     set(SDL2_DIR src/third/SDL2/MINGW/cmake)
# endif ()

# set(CMAKE_PREFIX_PATH "${CMAKE_SOURCE_DIR}/${SDL2_DIR}/../${triple}")
message("LibPath: ${CMAKE_LIBRARY_PATH}")
# set(CMAKE_PREFIX_PATH "${CMAKE_SOURCE_DIR}")
# set(CMAKE_LIBRARY_PATH "${CMAKE_SOURCE_DIR}/${SDL2_DIR}/../${triple}/lib" ${CMAKE_LIBRARY_PATH})
# find_library(SDL2_Lib NAMES SDL2)
# if (DEFINED SDL2_DIR)
#     find_package(SDL2 REQUIRED)
# endif ()
# message("SDL2 Lib (${SDL2_Lib_FOUND}): ${SDL2_Lib}")
# if (SDL2_Lib)
# message("Fodase")
# endif ()
# set(CMAKE_PREFIX_PATH "")

if (NOT DEFINED EMSCRIPTEN)
    include("CheckSDL.cmake")
else()
    find_package(SDL2 REQUIRED)
endif ()

# if (NOT DEFINED MSVC)
#     check_library_exists("-lSDL2;" SDL_Init "" HAS_SDL2)
#     # set(LIB_PATH "")
#     if (${HAS_SDL2})
#         find_package(SDL2 REQUIRED)
#     elseif (DEFINED SDL2_DIR)
#         set(LIB_PATH "${CMAKE_SOURCE_DIR}/${SDL2_DIR}/../${triple}/lib")
#         message("Testing SDL2 with path: ${LIB_PATH}")
#         check_library_exists("-lSDL2;" SDL_Init "${LIB_PATH}" HAS_SDL2_2)
#         set(HAS_SDL2 "${HAS_SDL2_2}")
#     else ()
#         set(LIB_PATH "${CMAKE_SOURCE_DIR}/dist/${triple}${LIB_PLATFORM}/lib")
#         message("Testing SDL2 with path: ${LIB_PATH}")
#         check_library_exists("-lSDL2;" SDL_Init "${LIB_PATH}" HAS_SDL2_2)
#         set(HAS_SDL2 "${HAS_SDL2_2}")
#     endif ()
#     message("HAS SDL: ${HAS_SDL2}")
# else ()
#     message("SDL2_DIR Lib: ${SDL2_DIR}/../lib/${CMAKE_SYSTEM_PROCESSOR}")
#     check_library_exists("SDL2.lib;" SDL_Init "${CMAKE_SOURCE_DIR}/${SDL2_DIR}/../lib/${CMAKE_SYSTEM_PROCESSOR}" HAS_SDL2)
# endif ()

include("CheckLua.cmake")

# if (NOT DEFINED MSVC)
#     check_library_exists("-l${LUA_LIB};" luaL_newstate "${CMAKE_LIBRARY_PATH}" HAS_LUA)
#     check_include_file("lua.h" HAS_LUAH)
#     if (NOT HAS_LUAH)
#         include_directories("${CMAKE_SOURCE_DIR}/lua/lua${LUA_VERSION}/source/src")
#     endif ()
# else ()
#     check_library_exists("${LUA_LIB}.lib;" luaL_newstate "${CMAKE_LIBRARY_PATH}" HAS_LUA)
#     if ("${LUA_VERSION}" STREQUAL "jit")
#         check_library_exists("lua51.lib;" luaL_newstate "${CMAKE_LIBRARY_PATH}" HAS_LUA51)
#     endif ()
# endif()
# message("Has Lua: ${HAS_LUA} - ${LUA_LIB}")
# if (NOT HAS_LUA)
#     set(LUA_FROM_SOURCE TRUE)
#     message("Include lua CMake")
#     add_subdirectory("${CMAKE_SOURCE_DIR}/lua/lua${LUA_VERSION}")
# endif ()

# if (${HAS_SDL2_2})
#     link_directories("${LIB_PATH}")
#     set(SDL2_INCLUDE_DIRS "src/third/SDL2/source/include")
#     set(SDL2_LIBRARIES SDL2)
#     find_library(SDL_MAIN SDL2main)
#     if (NOT "${SDL_MAIN}" STREQUAL "SDL_MAIN-NOTFOUND")
#         set(SDL2_LIBRARIES "${SDL2_LIBRARIES} SDL2main")
#     endif ()
#     if (DEFINED ANDROID)
#         add_library(SDL2 SHARED IMPORTED)
#         set_target_properties(SDL2 PROPERTIES
#             IMPORTED_LOCATION "${CMAKE_SOURCE_DIR}/dist/${triple}${LIB_PLATFORM}/lib/libSDL2.so"
#         )
#     endif ()
# elseif ("${HAS_SDL2}" STREQUAL "")
#     add_subdirectory(src/third/SDL2/source)
#     set(SDL2_INCLUDE_DIRS src/third/SDL2/source/include)
#     set(SDL2_LIBRARIES SDL2::SDL2 SDL2::SDL2main)
# endif()

include_directories(${SDL2_INCLUDE_DIRS})

## Static Library
add_library(${PROJECT_NAME} STATIC ${SELENE_SOURCES})
if (NOT DEFINED MSVC)
    target_link_libraries(${PROJECT_NAME} m)
endif ()
if (NOT DEFINED WIN32)
    target_link_libraries(${PROJECT_NAME} dl)
endif ()

set(LUA_LIB_EXT "${CMAKE_SHARED_LIBRARY_SUFFIX}")
set(LUA_LIB_TYPE "SHARED")
if ((DEFINED WIN32) OR (DEFINED EMSCRIPTEN))
    set(LUA_LIB_EXT "${CMAKE_STATIC_LIBRARY_SUFFIX}")
    set(LUA_LIB_TYPE "STATIC")
endif ()

## Imported Lua Lib
# if (NOT LUA_FROM_SOURCE)
#     message("Import Library ${LUA_LIB}")
#     add_library(${LUA_LIB} ${LUA_LIB_TYPE} IMPORTED)
#     if (DEFINED WIN32)
#         message("${CMAKE_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}${LUA_LIB}${LUA_LIB_EXT}")
#         set_target_properties(${LUA_LIB} PROPERTIES
#             IMPORTED_LOCATION "${CMAKE_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}${LUA_LIB}${LUA_LIB_EXT}"
#         )
#         if (${HAS_LUA51})
#             set_target_properties(lua51 PROPERTIES
#                 IMPORTED_LOCATION "${CMAKE_LIBRARY_PATH}/lua51${LUA_LIB_EXT}"
#             )
#         endif ()
#     else ()
#         message("${CMAKE_LIBRARY_PATH}/lib${LUA_LIB}${LUA_LIB_EXT}")
#         set_target_properties(${LUA_LIB} PROPERTIES
#             IMPORTED_LOCATION "${CMAKE_LIBRARY_PATH}/lib${LUA_LIB}${LUA_LIB_EXT}"
#         )
#     endif ()
# endif ()

## Shared Library
if (NOT DEFINED EMSCRIPTEN)
    add_library(${PROJECT_NAME}Shared SHARED ${SELENE_SOURCES})
    # target_link_directories(${PROJECT_NAME}Shared PRIVATE "${CMAKE_LIBRARY_PATH}")
    target_link_libraries(${PROJECT_NAME}Shared "${LUA_LIB}")
    if (${HAS_LUA51})
        target_link_libraries(${PROJECT_NAME}Shared lua51)
    endif ()
    target_link_libraries(${PROJECT_NAME}Shared ${SDL2_LIBRARIES})
    if (DEFINED MINGW)
        target_link_libraries(${PROJECT_NAME}Shared mingw32 opengl32 glu32 -mwindows)
    elseif (NOT DEFINED MSVC)
        if (${ANDROID})
            target_link_libraries(${PROJECT_NAME}Shared android GLESv1_CM GLESv2 log)
        else ()
            target_link_libraries(${PROJECT_NAME}Shared GL)
        endif ()
    endif ()
    set_target_properties(${PROJECT_NAME}Shared PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
    if (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
        set_target_properties(${PROJECT_NAME}Shared PROPERTIES PREFIX "")
        set_target_properties(${PROJECT_NAME}Shared PROPERTIES SUFFIX ".dll")
    endif()
endif ()

## Executable
if (NOT DEFINED ANDROID)
    add_executable(${PROJECT_NAME}Bin src/main.c)
    # target_link_directories(${PROJECT_NAME}Shared PRIVATE "${CMAKE_LIBRARY_PATH}")
    target_link_libraries(${PROJECT_NAME}Bin "${LUA_LIB}")
    if (${HAS_LUA51})
        target_link_libraries(${PROJECT_NAME}Bin lua51)
    endif ()
    if (WIN32)
        target_sources(${PROJECT_NAME}Bin PRIVATE "${CMAKE_SOURCE_DIR}/cross/windres/ICON.rc")
    endif ()
    set_target_properties(${PROJECT_NAME}Bin PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
    if (DEFINED EMSCRIPTEN)
        message("Emscripten options")
        set_target_properties(${PROJECT_NAME}Bin PROPERTIES SUFFIX .html)
        target_link_options(${PROJECT_NAME}Bin PRIVATE -sMAIN_MODULE -sALLOW_MEMORY_GROWTH -sFORCE_FILESYSTEM --shell-file ${CMAKE_SOURCE_DIR}/cross/emscripten/index.html)
    endif ()
    if (NOT DEFINED EMSCRIPTEN)
        target_link_libraries(${PROJECT_NAME}Bin ${PROJECT_NAME}Shared ${SDL2_LIBRARIES})
        if (DEFINED MINGW)
            target_link_libraries(${PROJECT_NAME}Bin mingw32 opengl32 glu32 -mwindows)
        elseif (NOT DEFINED MSVC)
            target_link_libraries(${PROJECT_NAME}Bin GL)
        else ()
            target_link_libraries(${PROJECT_NAME}Bin opengl32 glu32)
        endif ()
    else ()
        target_link_libraries(${PROJECT_NAME}Bin ${PROJECT_NAME} ${SDL2_LIBRARIES})
    endif ()
else ()
    add_library(${PROJECT_NAME}Bin SHARED src/runners/default.c)
    target_link_libraries(${PROJECT_NAME}Bin "${LUA_LIB}")
    set_target_properties(${PROJECT_NAME}Bin PROPERTIES OUTPUT_NAME main)
    target_link_libraries(${PROJECT_NAME}Bin ${PROJECT_NAME} ${SDL2_LIBRARIES})
    target_link_libraries(${PROJECT_NAME}Bin android GLESv1_CM GLESv2 log)
endif ()