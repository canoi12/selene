cmake_minimum_required(VERSION 3.15.0 FATAL_ERROR)
project(selene VERSION 0.2.1 LANGUAGES C)
include(CheckLibraryExists)
include(CheckIncludeFile)

set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Set build type")
if (DEFINED MSVC)
set (SDL_PRECOMP_DIR "src/third/SDL2/MSVC" CACHE STRING "Set SDL2 dir")
elseif (DEFINED MINGW)
set (SDL_PRECOMP_DIR "src/third/SDL2/MINGW" CACHE STRING "Set SDL2 dir")
else ()
set (SDL_PRECOMP_DIR "" CACHE STRING "Set SDL2 dir")
endif ()
set (SDL_SOURCE_DIR "src/third/SDL2/source" CACHE STRING "Set SDL2 source dir")

if (DEFINED MSVC AND DEFINED CMAKE_GENERATOR_PLATFORM)
    message("GENERATOR: ${CMAKE_GENERATOR_PLATFORM}")
    if ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "")
        if ("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "AMD64")
            set(CMAKE_SYSTEM_PROCESSOR "x64")
        else ()
            set(CMAKE_SYSTEM_PROCESSOR "${CMAKE_HOST_SYSTEM_PROCESSOR}")
        endif ()
    elseif ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
        set(CMAKE_SYSTEM_PROCESSOR "x86")
    else ()
        set(CMAKE_SYSTEM_PROCESSOR "${CMAKE_GENERATOR_PLATFORM}")
    endif()
endif ()

message("Build Type: ${CMAKE_BUILD_TYPE}")
message("Host System Name: ${CMAKE_HOST_SYSTEM_NAME}")
message("Host System Architecture: ${CMAKE_HOST_SYSTEM_PROCESSOR}")
message("Building for ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} target")
message("WIN32: ${WIN32}")
message("MSVC: ${MSVC}")
message("MINGW: ${MINGW}")
message("CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")

message("Static: ${CMAKE_STATIC_LIBRARY_SUFFIX} Shared: ${CMAKE_SHARED_LIBRARY_SUFFIX}")

if (${ANDROID})
    message("Android ABI: ${ANDROID_ABI}")
    message("Android Platform: ${ANDROID_PLATFORM}")
endif ()

if (WIN32)
    ENABLE_LANGUAGE(RC)
endif ()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/${CMAKE_SYSTEM_NAME}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/${CMAKE_SYSTEM_NAME}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/${CMAKE_SYSTEM_NAME}/lib)

if (NOT DEFINED MSVC)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lm")
endif ()


if (DEFINED triple)
    message("has triple ${triple}")
else ()
    message("Has no triple")
    if (DEFINED MSVC)
        if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86")
            set(triple "x86-windows-msvc")
        else ()
            set(triple "x64-windows-msvc")
        endif ()
        message("MSVC Triple: ${triple}")
    elseif (DEFINED MINGW)
        if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
            set(triple "x86_64-w64-mingw32")
        elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i686")
            set(triple "i686-w64-mingw32")
        endif ()
    else ()
        set(T_SUFFIX "gnu")
        if (${ANDROID})
        set(T_SUFFIX "android")
        endif ()
        if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
            set(triple "x86_64-linux-${T_SUFFIX}")
        elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i686")
            if (${ANDROID})
            set(triple "i386-linux-${T_SUFFIX}")
            else()
            set(triple "i686-linux-${T_SUFFIX}")
            endif ()
        elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "aarch64")
            set(triple "aarch64-linux-${T_SUFFIX}")
        else ()
            set(triple "armv7-linux-${T_SUFFIX}")
        endif ()
    endif ()
endif ()
message("TRIPLE: ${triple}")

if (DEFINED EMSCRIPTEN)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -sWASM=1")
endif ()

if (NOT DEFINED LIB_PLATFORM)
    if (${ANDROID})
    set(LIB_PLATFORM "/${ANDROID_PLATFORM}")
    elseif (DEFINED MSVC)
    set(LIB_PLATFORM "/v143")
    else()
    set(LIB_PLATFORM "")
    endif ()
endif ()

if (DEFINED MINGW)
add_definitions(-DMINGW)
endif ()

set(LUA_VERSION "5.4" CACHE STRING "Set the lua version to use")
set(LUA_LIB "lua${LUA_VERSION}")

# message("Lua Lib Path: ${CMAKE_SOURCE_DIR}/lua/lua${LUA_VERSION}/${triple}${LIB_PLATFORM}/lib/")
message("LibPath: ${CMAKE_LIBRARY_PATH}")
set(CMAKE_LIBRARY_PATH "${CMAKE_SOURCE_DIR}/builds/${triple}${LIB_PLATFORM}/lib")
message("Lua Lib Path: ${CMAKE_LIBRARY_PATH}")

if (${LUA_VERSION} STREQUAL "jit")
message("Using Lua JIT")
add_definitions(-DUSE_JIT)
endif ()

file(GLOB SELENE_SOURCES src/Data.c src/selene.c src/modules/*.c src/third/glad/src/glad.c)

include_directories(include/ src/third/ src/third/glad/include)
link_directories("${CMAKE_LIBRARY_PATH}")

if (NOT DEFINED EMSCRIPTEN)
    include("CheckSDL.cmake")
else()
    find_package(SDL2 REQUIRED)
endif ()
include("CheckLua.cmake")

include_directories(${SDL2_INCLUDE_DIRS})

## Static Library
add_library(${PROJECT_NAME} STATIC ${SELENE_SOURCES})
if (NOT DEFINED MSVC)
    target_link_libraries(${PROJECT_NAME} m)
endif ()
if (NOT DEFINED WIN32)
    target_link_libraries(${PROJECT_NAME} dl)
endif ()

## Shared Library
if (NOT DEFINED EMSCRIPTEN)
    add_library(${PROJECT_NAME}Shared SHARED ${SELENE_SOURCES})
    # target_link_directories(${PROJECT_NAME}Shared PRIVATE "${CMAKE_LIBRARY_PATH}")
    target_link_libraries(${PROJECT_NAME}Shared "${LUA_LIB}")
    if (${HAS_LUA51})
        target_link_libraries(${PROJECT_NAME}Shared lua51)
    endif ()
    target_link_libraries(${PROJECT_NAME}Shared ${SDL2_LIBRARIES})
    if (DEFINED MINGW)
        target_link_libraries(${PROJECT_NAME}Shared mingw32 opengl32 glu32 -mwindows)
    elseif (NOT DEFINED MSVC)
        if (${ANDROID})
            target_link_libraries(${PROJECT_NAME}Shared android GLESv1_CM GLESv2 log)
        else ()
            target_link_libraries(${PROJECT_NAME}Shared GL)
        endif ()
    endif ()
    set_target_properties(${PROJECT_NAME}Shared PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
endif ()

## Executable
if (NOT DEFINED ANDROID)
    add_executable(${PROJECT_NAME}Bin src/main.c)
    # target_link_directories(${PROJECT_NAME}Shared PRIVATE "${CMAKE_LIBRARY_PATH}")
    target_link_libraries(${PROJECT_NAME}Bin "${LUA_LIB}")
    if (${HAS_LUA51})
        target_link_libraries(${PROJECT_NAME}Bin lua51)
    endif ()
    if (WIN32)
        target_sources(${PROJECT_NAME}Bin PRIVATE "${CMAKE_SOURCE_DIR}/cross/windres/ICON.rc")
    endif ()
    set_target_properties(${PROJECT_NAME}Bin PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
    if (DEFINED EMSCRIPTEN)
        message("Emscripten options")
        set_target_properties(${PROJECT_NAME}Bin PROPERTIES SUFFIX .html)
        target_link_options(${PROJECT_NAME}Bin PRIVATE -sMAIN_MODULE -sALLOW_MEMORY_GROWTH -sFORCE_FILESYSTEM --shell-file ${CMAKE_SOURCE_DIR}/cross/emscripten/index.html)
    endif ()
    if (NOT DEFINED EMSCRIPTEN)
        target_link_libraries(${PROJECT_NAME}Bin ${PROJECT_NAME}Shared ${SDL2_LIBRARIES})
        if (DEFINED MINGW)
            target_link_libraries(${PROJECT_NAME}Bin mingw32 opengl32 glu32 -mwindows)
        elseif (NOT DEFINED MSVC)
            target_link_libraries(${PROJECT_NAME}Bin GL)
        else ()
            target_link_libraries(${PROJECT_NAME}Bin opengl32 glu32)
        endif ()
    else ()
        target_link_libraries(${PROJECT_NAME}Bin ${PROJECT_NAME} ${SDL2_LIBRARIES})
    endif ()
else ()
    add_library(${PROJECT_NAME}Bin SHARED src/runners/default.c)
    target_link_libraries(${PROJECT_NAME}Bin "${LUA_LIB}")
    set_target_properties(${PROJECT_NAME}Bin PROPERTIES OUTPUT_NAME main)
    target_link_libraries(${PROJECT_NAME}Bin ${PROJECT_NAME} ${SDL2_LIBRARIES})
    target_link_libraries(${PROJECT_NAME}Bin android GLESv1_CM GLESv2 log)
endif ()